import uvicorn
from contextlib import asynccontextmanager
from fastapi import FastAPI
from loguru import logger

import aiocron
from database.uow.mldb import init_db
from parsers.yandex_tv_parser import parse_yandex_schedule
from config import settings
from utils.notifications import TGBotAPI


@aiocron.crontab("*/5 * * * *")
async def scheduled_parsing_job():

    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    try:
        await parse_yandex_schedule()
        logger.info("–ó–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e)


@asynccontextmanager
async def lifespan(app: FastAPI):

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    if settings.TELEGRAM_BOT_TOKEN and settings.TELEGRAM_CHAT_ID:
        try:
            notifier = TGBotAPI()
            await notifier.send_message(
                chat_id=settings.TELEGRAM_CHAT_ID,
                text="üì∫ Yandex TV Parser –∑–∞–ø—É—â–µ–Ω!",
                parse_mode=None,
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –≤ Telegram: {e}")

    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ.")

    yield

    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


app = FastAPI(lifespan=lifespan)


@app.get("/health")
async def health_check():
    return {"status": "ok"}


if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000)
