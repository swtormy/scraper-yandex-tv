import asyncio
import uvicorn
from contextlib import asynccontextmanager
from fastapi import FastAPI
from loguru import logger

import aiocron
from database.uow.mldb import init_db
from parsers.yandex_tv_parser import parse_yandex_schedule
from config import settings
from utils.notifications import TGBotAPI


@aiocron.crontab("*/5 * * * *")
async def scheduled_parsing_job():

    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    try:
        await parse_yandex_schedule()
        logger.info("–ó–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e)


@asynccontextmanager
async def lifespan(app: FastAPI):

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ...")
    initial_parse_task = asyncio.create_task(parse_yandex_schedule())

    logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á aiocron...")

    if settings.TELEGRAM_BOT_TOKEN and settings.TELEGRAM_CHAT_ID:
        try:
            notifier = TGBotAPI()
            await notifier.send_message(
                chat_id=settings.TELEGRAM_CHAT_ID,
                text="üì∫ Yandex TV Parser –∑–∞–ø—É—â–µ–Ω!",
                parse_mode=None,
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –≤ Telegram: {e}")

    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ.")

    yield

    logger.info("–ù–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")

    if initial_parse_task and not initial_parse_task.done():
        logger.info("–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        initial_parse_task.cancel()
        try:
            await initial_parse_task
        except asyncio.CancelledError:
            logger.info("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")

    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    if tasks:
        logger.info(f"–û—Ç–º–µ–Ω–∞ {len(tasks)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–≤–∫–ª—é—á–∞—è aiocron)...")
        for task in tasks:
            task.cancel()
        results = await asyncio.gather(*tasks, return_exceptions=True)
        cancelled_count = sum(
            1 for r in results if isinstance(r, asyncio.CancelledError)
        )
        error_count = sum(
            1
            for r in results
            if isinstance(r, Exception) and not isinstance(r, asyncio.CancelledError)
        )
        logger.info(
            f"–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled_count}, –û—à–∏–±–∫–∏: {error_count}"
        )
        for i, result in enumerate(results):
            if isinstance(result, Exception) and not isinstance(
                result, asyncio.CancelledError
            ):
                task_name = (
                    tasks[i].get_name()
                    if hasattr(tasks[i], "get_name")
                    else f"Task-{i}"
                )
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ '{task_name}': {result}")
    else:
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


app = FastAPI(lifespan=lifespan)


@app.get("/health")
async def health_check():
    return {"status": "ok"}


if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000)
